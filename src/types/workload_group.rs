// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `networking/v1beta1/workload_group.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct WorkloadGroup {
    // message fields
    pub metadata: ::protobuf::SingularPtrField<WorkloadGroup_ObjectMeta>,
    pub template: ::protobuf::SingularPtrField<super::workload_entry::WorkloadEntry>,
    pub probe: ::protobuf::SingularPtrField<ReadinessProbe>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorkloadGroup {
    fn default() -> &'a WorkloadGroup {
        <WorkloadGroup as ::protobuf::Message>::default_instance()
    }
}

impl WorkloadGroup {
    pub fn new() -> WorkloadGroup {
        ::std::default::Default::default()
    }

    // .istio.networking.v1beta1.WorkloadGroup.ObjectMeta metadata = 1;


    pub fn get_metadata(&self) -> &WorkloadGroup_ObjectMeta {
        self.metadata.as_ref().unwrap_or_else(|| <WorkloadGroup_ObjectMeta as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: WorkloadGroup_ObjectMeta) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut WorkloadGroup_ObjectMeta {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> WorkloadGroup_ObjectMeta {
        self.metadata.take().unwrap_or_else(|| WorkloadGroup_ObjectMeta::new())
    }

    // .istio.networking.v1beta1.WorkloadEntry template = 2;


    pub fn get_template(&self) -> &super::workload_entry::WorkloadEntry {
        self.template.as_ref().unwrap_or_else(|| <super::workload_entry::WorkloadEntry as ::protobuf::Message>::default_instance())
    }
    pub fn clear_template(&mut self) {
        self.template.clear();
    }

    pub fn has_template(&self) -> bool {
        self.template.is_some()
    }

    // Param is passed by value, moved
    pub fn set_template(&mut self, v: super::workload_entry::WorkloadEntry) {
        self.template = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_template(&mut self) -> &mut super::workload_entry::WorkloadEntry {
        if self.template.is_none() {
            self.template.set_default();
        }
        self.template.as_mut().unwrap()
    }

    // Take field
    pub fn take_template(&mut self) -> super::workload_entry::WorkloadEntry {
        self.template.take().unwrap_or_else(|| super::workload_entry::WorkloadEntry::new())
    }

    // .istio.networking.v1beta1.ReadinessProbe probe = 3;


    pub fn get_probe(&self) -> &ReadinessProbe {
        self.probe.as_ref().unwrap_or_else(|| <ReadinessProbe as ::protobuf::Message>::default_instance())
    }
    pub fn clear_probe(&mut self) {
        self.probe.clear();
    }

    pub fn has_probe(&self) -> bool {
        self.probe.is_some()
    }

    // Param is passed by value, moved
    pub fn set_probe(&mut self, v: ReadinessProbe) {
        self.probe = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_probe(&mut self) -> &mut ReadinessProbe {
        if self.probe.is_none() {
            self.probe.set_default();
        }
        self.probe.as_mut().unwrap()
    }

    // Take field
    pub fn take_probe(&mut self) -> ReadinessProbe {
        self.probe.take().unwrap_or_else(|| ReadinessProbe::new())
    }
}

impl ::protobuf::Message for WorkloadGroup {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.template {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.probe {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.template)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.probe)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.template.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.probe.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.template.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.probe.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkloadGroup {
        WorkloadGroup::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WorkloadGroup_ObjectMeta>>(
                "metadata",
                |m: &WorkloadGroup| { &m.metadata },
                |m: &mut WorkloadGroup| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::workload_entry::WorkloadEntry>>(
                "template",
                |m: &WorkloadGroup| { &m.template },
                |m: &mut WorkloadGroup| { &mut m.template },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReadinessProbe>>(
                "probe",
                |m: &WorkloadGroup| { &m.probe },
                |m: &mut WorkloadGroup| { &mut m.probe },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WorkloadGroup>(
                "WorkloadGroup",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WorkloadGroup {
        static instance: ::protobuf::rt::LazyV2<WorkloadGroup> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WorkloadGroup::new)
    }
}

impl ::protobuf::Clear for WorkloadGroup {
    fn clear(&mut self) {
        self.metadata.clear();
        self.template.clear();
        self.probe.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkloadGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkloadGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorkloadGroup_ObjectMeta {
    // message fields
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub annotations: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorkloadGroup_ObjectMeta {
    fn default() -> &'a WorkloadGroup_ObjectMeta {
        <WorkloadGroup_ObjectMeta as ::protobuf::Message>::default_instance()
    }
}

impl WorkloadGroup_ObjectMeta {
    pub fn new() -> WorkloadGroup_ObjectMeta {
        ::std::default::Default::default()
    }

    // repeated .istio.networking.v1beta1.WorkloadGroup.ObjectMeta.LabelsEntry labels = 1;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // repeated .istio.networking.v1beta1.WorkloadGroup.ObjectMeta.AnnotationsEntry annotations = 2;


    pub fn get_annotations(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.annotations
    }
    pub fn clear_annotations(&mut self) {
        self.annotations.clear();
    }

    // Param is passed by value, moved
    pub fn set_annotations(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.annotations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_annotations(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.annotations
    }

    // Take field
    pub fn take_annotations(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.annotations, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for WorkloadGroup_ObjectMeta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.annotations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.labels);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.annotations);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.labels, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.annotations, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkloadGroup_ObjectMeta {
        WorkloadGroup_ObjectMeta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &WorkloadGroup_ObjectMeta| { &m.labels },
                |m: &mut WorkloadGroup_ObjectMeta| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "annotations",
                |m: &WorkloadGroup_ObjectMeta| { &m.annotations },
                |m: &mut WorkloadGroup_ObjectMeta| { &mut m.annotations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WorkloadGroup_ObjectMeta>(
                "WorkloadGroup.ObjectMeta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WorkloadGroup_ObjectMeta {
        static instance: ::protobuf::rt::LazyV2<WorkloadGroup_ObjectMeta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WorkloadGroup_ObjectMeta::new)
    }
}

impl ::protobuf::Clear for WorkloadGroup_ObjectMeta {
    fn clear(&mut self) {
        self.labels.clear();
        self.annotations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkloadGroup_ObjectMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkloadGroup_ObjectMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadinessProbe {
    // message fields
    pub initial_delay_seconds: i32,
    pub timeout_seconds: i32,
    pub period_seconds: i32,
    pub success_threshold: i32,
    pub failure_threshold: i32,
    // message oneof groups
    pub health_check_method: ::std::option::Option<ReadinessProbe_oneof_health_check_method>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadinessProbe {
    fn default() -> &'a ReadinessProbe {
        <ReadinessProbe as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ReadinessProbe_oneof_health_check_method {
    http_get(HTTPHealthCheckConfig),
    tcp_socket(TCPHealthCheckConfig),
    exec(ExecHealthCheckConfig),
}

impl ReadinessProbe {
    pub fn new() -> ReadinessProbe {
        ::std::default::Default::default()
    }

    // int32 initial_delay_seconds = 2;


    pub fn get_initial_delay_seconds(&self) -> i32 {
        self.initial_delay_seconds
    }
    pub fn clear_initial_delay_seconds(&mut self) {
        self.initial_delay_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_initial_delay_seconds(&mut self, v: i32) {
        self.initial_delay_seconds = v;
    }

    // int32 timeout_seconds = 3;


    pub fn get_timeout_seconds(&self) -> i32 {
        self.timeout_seconds
    }
    pub fn clear_timeout_seconds(&mut self) {
        self.timeout_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_seconds(&mut self, v: i32) {
        self.timeout_seconds = v;
    }

    // int32 period_seconds = 4;


    pub fn get_period_seconds(&self) -> i32 {
        self.period_seconds
    }
    pub fn clear_period_seconds(&mut self) {
        self.period_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_period_seconds(&mut self, v: i32) {
        self.period_seconds = v;
    }

    // int32 success_threshold = 5;


    pub fn get_success_threshold(&self) -> i32 {
        self.success_threshold
    }
    pub fn clear_success_threshold(&mut self) {
        self.success_threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_success_threshold(&mut self, v: i32) {
        self.success_threshold = v;
    }

    // int32 failure_threshold = 6;


    pub fn get_failure_threshold(&self) -> i32 {
        self.failure_threshold
    }
    pub fn clear_failure_threshold(&mut self) {
        self.failure_threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_failure_threshold(&mut self, v: i32) {
        self.failure_threshold = v;
    }

    // .istio.networking.v1beta1.HTTPHealthCheckConfig http_get = 7;


    pub fn get_http_get(&self) -> &HTTPHealthCheckConfig {
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::http_get(ref v)) => v,
            _ => <HTTPHealthCheckConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_get(&mut self) {
        self.health_check_method = ::std::option::Option::None;
    }

    pub fn has_http_get(&self) -> bool {
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::http_get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_get(&mut self, v: HTTPHealthCheckConfig) {
        self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::http_get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_get(&mut self) -> &mut HTTPHealthCheckConfig {
        if let ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::http_get(_)) = self.health_check_method {
        } else {
            self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::http_get(HTTPHealthCheckConfig::new()));
        }
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::http_get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_get(&mut self) -> HTTPHealthCheckConfig {
        if self.has_http_get() {
            match self.health_check_method.take() {
                ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::http_get(v)) => v,
                _ => panic!(),
            }
        } else {
            HTTPHealthCheckConfig::new()
        }
    }

    // .istio.networking.v1beta1.TCPHealthCheckConfig tcp_socket = 8;


    pub fn get_tcp_socket(&self) -> &TCPHealthCheckConfig {
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::tcp_socket(ref v)) => v,
            _ => <TCPHealthCheckConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_tcp_socket(&mut self) {
        self.health_check_method = ::std::option::Option::None;
    }

    pub fn has_tcp_socket(&self) -> bool {
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::tcp_socket(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tcp_socket(&mut self, v: TCPHealthCheckConfig) {
        self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::tcp_socket(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tcp_socket(&mut self) -> &mut TCPHealthCheckConfig {
        if let ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::tcp_socket(_)) = self.health_check_method {
        } else {
            self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::tcp_socket(TCPHealthCheckConfig::new()));
        }
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::tcp_socket(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tcp_socket(&mut self) -> TCPHealthCheckConfig {
        if self.has_tcp_socket() {
            match self.health_check_method.take() {
                ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::tcp_socket(v)) => v,
                _ => panic!(),
            }
        } else {
            TCPHealthCheckConfig::new()
        }
    }

    // .istio.networking.v1beta1.ExecHealthCheckConfig exec = 9;


    pub fn get_exec(&self) -> &ExecHealthCheckConfig {
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::exec(ref v)) => v,
            _ => <ExecHealthCheckConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exec(&mut self) {
        self.health_check_method = ::std::option::Option::None;
    }

    pub fn has_exec(&self) -> bool {
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::exec(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exec(&mut self, v: ExecHealthCheckConfig) {
        self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::exec(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exec(&mut self) -> &mut ExecHealthCheckConfig {
        if let ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::exec(_)) = self.health_check_method {
        } else {
            self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::exec(ExecHealthCheckConfig::new()));
        }
        match self.health_check_method {
            ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::exec(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exec(&mut self) -> ExecHealthCheckConfig {
        if self.has_exec() {
            match self.health_check_method.take() {
                ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::exec(v)) => v,
                _ => panic!(),
            }
        } else {
            ExecHealthCheckConfig::new()
        }
    }
}

impl ::protobuf::Message for ReadinessProbe {
    fn is_initialized(&self) -> bool {
        if let Some(ReadinessProbe_oneof_health_check_method::http_get(ref v)) = self.health_check_method {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadinessProbe_oneof_health_check_method::tcp_socket(ref v)) = self.health_check_method {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReadinessProbe_oneof_health_check_method::exec(ref v)) = self.health_check_method {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.initial_delay_seconds = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timeout_seconds = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.period_seconds = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.success_threshold = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.failure_threshold = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::http_get(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::tcp_socket(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.health_check_method = ::std::option::Option::Some(ReadinessProbe_oneof_health_check_method::exec(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.initial_delay_seconds != 0 {
            my_size += ::protobuf::rt::value_size(2, self.initial_delay_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timeout_seconds != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timeout_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.period_seconds != 0 {
            my_size += ::protobuf::rt::value_size(4, self.period_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success_threshold != 0 {
            my_size += ::protobuf::rt::value_size(5, self.success_threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.failure_threshold != 0 {
            my_size += ::protobuf::rt::value_size(6, self.failure_threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.health_check_method {
            match v {
                &ReadinessProbe_oneof_health_check_method::http_get(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadinessProbe_oneof_health_check_method::tcp_socket(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReadinessProbe_oneof_health_check_method::exec(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.initial_delay_seconds != 0 {
            os.write_int32(2, self.initial_delay_seconds)?;
        }
        if self.timeout_seconds != 0 {
            os.write_int32(3, self.timeout_seconds)?;
        }
        if self.period_seconds != 0 {
            os.write_int32(4, self.period_seconds)?;
        }
        if self.success_threshold != 0 {
            os.write_int32(5, self.success_threshold)?;
        }
        if self.failure_threshold != 0 {
            os.write_int32(6, self.failure_threshold)?;
        }
        if let ::std::option::Option::Some(ref v) = self.health_check_method {
            match v {
                &ReadinessProbe_oneof_health_check_method::http_get(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadinessProbe_oneof_health_check_method::tcp_socket(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReadinessProbe_oneof_health_check_method::exec(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadinessProbe {
        ReadinessProbe::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "initial_delay_seconds",
                |m: &ReadinessProbe| { &m.initial_delay_seconds },
                |m: &mut ReadinessProbe| { &mut m.initial_delay_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "timeout_seconds",
                |m: &ReadinessProbe| { &m.timeout_seconds },
                |m: &mut ReadinessProbe| { &mut m.timeout_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "period_seconds",
                |m: &ReadinessProbe| { &m.period_seconds },
                |m: &mut ReadinessProbe| { &mut m.period_seconds },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "success_threshold",
                |m: &ReadinessProbe| { &m.success_threshold },
                |m: &mut ReadinessProbe| { &mut m.success_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "failure_threshold",
                |m: &ReadinessProbe| { &m.failure_threshold },
                |m: &mut ReadinessProbe| { &mut m.failure_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HTTPHealthCheckConfig>(
                "http_get",
                ReadinessProbe::has_http_get,
                ReadinessProbe::get_http_get,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TCPHealthCheckConfig>(
                "tcp_socket",
                ReadinessProbe::has_tcp_socket,
                ReadinessProbe::get_tcp_socket,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ExecHealthCheckConfig>(
                "exec",
                ReadinessProbe::has_exec,
                ReadinessProbe::get_exec,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadinessProbe>(
                "ReadinessProbe",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadinessProbe {
        static instance: ::protobuf::rt::LazyV2<ReadinessProbe> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadinessProbe::new)
    }
}

impl ::protobuf::Clear for ReadinessProbe {
    fn clear(&mut self) {
        self.initial_delay_seconds = 0;
        self.timeout_seconds = 0;
        self.period_seconds = 0;
        self.success_threshold = 0;
        self.failure_threshold = 0;
        self.health_check_method = ::std::option::Option::None;
        self.health_check_method = ::std::option::Option::None;
        self.health_check_method = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadinessProbe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadinessProbe {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HTTPHealthCheckConfig {
    // message fields
    pub path: ::std::string::String,
    pub port: u32,
    pub host: ::std::string::String,
    pub scheme: ::std::string::String,
    pub http_headers: ::protobuf::RepeatedField<HTTPHeader>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HTTPHealthCheckConfig {
    fn default() -> &'a HTTPHealthCheckConfig {
        <HTTPHealthCheckConfig as ::protobuf::Message>::default_instance()
    }
}

impl HTTPHealthCheckConfig {
    pub fn new() -> HTTPHealthCheckConfig {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // uint32 port = 2;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }

    // string host = 3;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    // string scheme = 4;


    pub fn get_scheme(&self) -> &str {
        &self.scheme
    }
    pub fn clear_scheme(&mut self) {
        self.scheme.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme(&mut self, v: ::std::string::String) {
        self.scheme = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme(&mut self) -> &mut ::std::string::String {
        &mut self.scheme
    }

    // Take field
    pub fn take_scheme(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme, ::std::string::String::new())
    }

    // repeated .istio.networking.v1beta1.HTTPHeader http_headers = 5;


    pub fn get_http_headers(&self) -> &[HTTPHeader] {
        &self.http_headers
    }
    pub fn clear_http_headers(&mut self) {
        self.http_headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_http_headers(&mut self, v: ::protobuf::RepeatedField<HTTPHeader>) {
        self.http_headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_http_headers(&mut self) -> &mut ::protobuf::RepeatedField<HTTPHeader> {
        &mut self.http_headers
    }

    // Take field
    pub fn take_http_headers(&mut self) -> ::protobuf::RepeatedField<HTTPHeader> {
        ::std::mem::replace(&mut self.http_headers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HTTPHealthCheckConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.http_headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.http_headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.host);
        }
        if !self.scheme.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.scheme);
        }
        for value in &self.http_headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        if !self.host.is_empty() {
            os.write_string(3, &self.host)?;
        }
        if !self.scheme.is_empty() {
            os.write_string(4, &self.scheme)?;
        }
        for v in &self.http_headers {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HTTPHealthCheckConfig {
        HTTPHealthCheckConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &HTTPHealthCheckConfig| { &m.path },
                |m: &mut HTTPHealthCheckConfig| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &HTTPHealthCheckConfig| { &m.port },
                |m: &mut HTTPHealthCheckConfig| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host",
                |m: &HTTPHealthCheckConfig| { &m.host },
                |m: &mut HTTPHealthCheckConfig| { &mut m.host },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scheme",
                |m: &HTTPHealthCheckConfig| { &m.scheme },
                |m: &mut HTTPHealthCheckConfig| { &mut m.scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HTTPHeader>>(
                "http_headers",
                |m: &HTTPHealthCheckConfig| { &m.http_headers },
                |m: &mut HTTPHealthCheckConfig| { &mut m.http_headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HTTPHealthCheckConfig>(
                "HTTPHealthCheckConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HTTPHealthCheckConfig {
        static instance: ::protobuf::rt::LazyV2<HTTPHealthCheckConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HTTPHealthCheckConfig::new)
    }
}

impl ::protobuf::Clear for HTTPHealthCheckConfig {
    fn clear(&mut self) {
        self.path.clear();
        self.port = 0;
        self.host.clear();
        self.scheme.clear();
        self.http_headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HTTPHealthCheckConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HTTPHealthCheckConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HTTPHeader {
    // message fields
    pub name: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HTTPHeader {
    fn default() -> &'a HTTPHeader {
        <HTTPHeader as ::protobuf::Message>::default_instance()
    }
}

impl HTTPHeader {
    pub fn new() -> HTTPHeader {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HTTPHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HTTPHeader {
        HTTPHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &HTTPHeader| { &m.name },
                |m: &mut HTTPHeader| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &HTTPHeader| { &m.value },
                |m: &mut HTTPHeader| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HTTPHeader>(
                "HTTPHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HTTPHeader {
        static instance: ::protobuf::rt::LazyV2<HTTPHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HTTPHeader::new)
    }
}

impl ::protobuf::Clear for HTTPHeader {
    fn clear(&mut self) {
        self.name.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HTTPHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HTTPHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TCPHealthCheckConfig {
    // message fields
    pub host: ::std::string::String,
    pub port: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TCPHealthCheckConfig {
    fn default() -> &'a TCPHealthCheckConfig {
        <TCPHealthCheckConfig as ::protobuf::Message>::default_instance()
    }
}

impl TCPHealthCheckConfig {
    pub fn new() -> TCPHealthCheckConfig {
        ::std::default::Default::default()
    }

    // string host = 1;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    // uint32 port = 2;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }
}

impl ::protobuf::Message for TCPHealthCheckConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TCPHealthCheckConfig {
        TCPHealthCheckConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host",
                |m: &TCPHealthCheckConfig| { &m.host },
                |m: &mut TCPHealthCheckConfig| { &mut m.host },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &TCPHealthCheckConfig| { &m.port },
                |m: &mut TCPHealthCheckConfig| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TCPHealthCheckConfig>(
                "TCPHealthCheckConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TCPHealthCheckConfig {
        static instance: ::protobuf::rt::LazyV2<TCPHealthCheckConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TCPHealthCheckConfig::new)
    }
}

impl ::protobuf::Clear for TCPHealthCheckConfig {
    fn clear(&mut self) {
        self.host.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TCPHealthCheckConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TCPHealthCheckConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecHealthCheckConfig {
    // message fields
    pub command: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecHealthCheckConfig {
    fn default() -> &'a ExecHealthCheckConfig {
        <ExecHealthCheckConfig as ::protobuf::Message>::default_instance()
    }
}

impl ExecHealthCheckConfig {
    pub fn new() -> ExecHealthCheckConfig {
        ::std::default::Default::default()
    }

    // repeated string command = 1;


    pub fn get_command(&self) -> &[::std::string::String] {
        &self.command
    }
    pub fn clear_command(&mut self) {
        self.command.clear();
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.command = v;
    }

    // Mutable pointer to the field.
    pub fn mut_command(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.command
    }

    // Take field
    pub fn take_command(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.command, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExecHealthCheckConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.command)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.command {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.command {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecHealthCheckConfig {
        ExecHealthCheckConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "command",
                |m: &ExecHealthCheckConfig| { &m.command },
                |m: &mut ExecHealthCheckConfig| { &mut m.command },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExecHealthCheckConfig>(
                "ExecHealthCheckConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExecHealthCheckConfig {
        static instance: ::protobuf::rt::LazyV2<ExecHealthCheckConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExecHealthCheckConfig::new)
    }
}

impl ::protobuf::Clear for ExecHealthCheckConfig {
    fn clear(&mut self) {
        self.command.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecHealthCheckConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecHealthCheckConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'networking/v1beta1/workload_group.proto\x12\x18istio.networking.v1bet\
    a1\x1a\x1fgoogle/api/field_behavior.proto\x1a'networking/v1beta1/workloa\
    d_entry.proto\"\xb2\x04\n\rWorkloadGroup\x12N\n\x08metadata\x18\x01\x20\
    \x01(\x0b22.istio.networking.v1beta1.WorkloadGroup.ObjectMetaR\x08metada\
    ta\x12H\n\x08template\x18\x02\x20\x01(\x0b2'.istio.networking.v1beta1.Wo\
    rkloadEntryR\x08templateB\x03\xe0A\x02\x12>\n\x05probe\x18\x03\x20\x01(\
    \x0b2(.istio.networking.v1beta1.ReadinessProbeR\x05probe\x1a\xc6\x02\n\n\
    ObjectMeta\x12V\n\x06labels\x18\x01\x20\x03(\x0b2>.istio.networking.v1be\
    ta1.WorkloadGroup.ObjectMeta.LabelsEntryR\x06labels\x12e\n\x0bannotation\
    s\x18\x02\x20\x03(\x0b2C.istio.networking.v1beta1.WorkloadGroup.ObjectMe\
    ta.AnnotationsEntryR\x0bannotations\x1a9\n\x0bLabelsEntry\x12\x10\n\x03k\
    ey\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05\
    value:\x028\x01\x1a>\n\x10AnnotationsEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\
    \x01\"\xeb\x03\n\x0eReadinessProbe\x122\n\x15initial_delay_seconds\x18\
    \x02\x20\x01(\x05R\x13initialDelaySeconds\x12'\n\x0ftimeout_seconds\x18\
    \x03\x20\x01(\x05R\x0etimeoutSeconds\x12%\n\x0eperiod_seconds\x18\x04\
    \x20\x01(\x05R\rperiodSeconds\x12+\n\x11success_threshold\x18\x05\x20\
    \x01(\x05R\x10successThreshold\x12+\n\x11failure_threshold\x18\x06\x20\
    \x01(\x05R\x10failureThreshold\x12L\n\x08http_get\x18\x07\x20\x01(\x0b2/\
    .istio.networking.v1beta1.HTTPHealthCheckConfigH\0R\x07httpGet\x12O\n\nt\
    cp_socket\x18\x08\x20\x01(\x0b2..istio.networking.v1beta1.TCPHealthCheck\
    ConfigH\0R\ttcpSocket\x12E\n\x04exec\x18\t\x20\x01(\x0b2/.istio.networki\
    ng.v1beta1.ExecHealthCheckConfigH\0R\x04execB\x15\n\x13health_check_meth\
    od\"\xb9\x01\n\x15HTTPHealthCheckConfig\x12\x12\n\x04path\x18\x01\x20\
    \x01(\tR\x04path\x12\x17\n\x04port\x18\x02\x20\x01(\rR\x04portB\x03\xe0A\
    \x02\x12\x12\n\x04host\x18\x03\x20\x01(\tR\x04host\x12\x16\n\x06scheme\
    \x18\x04\x20\x01(\tR\x06scheme\x12G\n\x0chttp_headers\x18\x05\x20\x03(\
    \x0b2$.istio.networking.v1beta1.HTTPHeaderR\x0bhttpHeaders\"6\n\nHTTPHea\
    der\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value\"C\n\x14TCPHealthCheckConfig\x12\x12\n\x04host\
    \x18\x01\x20\x01(\tR\x04host\x12\x17\n\x04port\x18\x02\x20\x01(\rR\x04po\
    rtB\x03\xe0A\x02\"1\n\x15ExecHealthCheckConfig\x12\x18\n\x07command\x18\
    \x01\x20\x03(\tR\x07commandB!Z\x1fistio.io/api/networking/v1beta1b\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
