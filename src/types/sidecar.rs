// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `networking/v1beta1/sidecar.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Sidecar {
    // message fields
    pub workload_selector: ::protobuf::SingularPtrField<WorkloadSelector>,
    pub ingress: ::protobuf::RepeatedField<IstioIngressListener>,
    pub egress: ::protobuf::RepeatedField<IstioEgressListener>,
    pub outbound_traffic_policy: ::protobuf::SingularPtrField<OutboundTrafficPolicy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Sidecar {
    fn default() -> &'a Sidecar {
        <Sidecar as ::protobuf::Message>::default_instance()
    }
}

impl Sidecar {
    pub fn new() -> Sidecar {
        ::std::default::Default::default()
    }

    // .istio.networking.v1beta1.WorkloadSelector workload_selector = 1;


    pub fn get_workload_selector(&self) -> &WorkloadSelector {
        self.workload_selector.as_ref().unwrap_or_else(|| <WorkloadSelector as ::protobuf::Message>::default_instance())
    }
    pub fn clear_workload_selector(&mut self) {
        self.workload_selector.clear();
    }

    pub fn has_workload_selector(&self) -> bool {
        self.workload_selector.is_some()
    }

    // Param is passed by value, moved
    pub fn set_workload_selector(&mut self, v: WorkloadSelector) {
        self.workload_selector = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_workload_selector(&mut self) -> &mut WorkloadSelector {
        if self.workload_selector.is_none() {
            self.workload_selector.set_default();
        }
        self.workload_selector.as_mut().unwrap()
    }

    // Take field
    pub fn take_workload_selector(&mut self) -> WorkloadSelector {
        self.workload_selector.take().unwrap_or_else(|| WorkloadSelector::new())
    }

    // repeated .istio.networking.v1beta1.IstioIngressListener ingress = 2;


    pub fn get_ingress(&self) -> &[IstioIngressListener] {
        &self.ingress
    }
    pub fn clear_ingress(&mut self) {
        self.ingress.clear();
    }

    // Param is passed by value, moved
    pub fn set_ingress(&mut self, v: ::protobuf::RepeatedField<IstioIngressListener>) {
        self.ingress = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ingress(&mut self) -> &mut ::protobuf::RepeatedField<IstioIngressListener> {
        &mut self.ingress
    }

    // Take field
    pub fn take_ingress(&mut self) -> ::protobuf::RepeatedField<IstioIngressListener> {
        ::std::mem::replace(&mut self.ingress, ::protobuf::RepeatedField::new())
    }

    // repeated .istio.networking.v1beta1.IstioEgressListener egress = 3;


    pub fn get_egress(&self) -> &[IstioEgressListener] {
        &self.egress
    }
    pub fn clear_egress(&mut self) {
        self.egress.clear();
    }

    // Param is passed by value, moved
    pub fn set_egress(&mut self, v: ::protobuf::RepeatedField<IstioEgressListener>) {
        self.egress = v;
    }

    // Mutable pointer to the field.
    pub fn mut_egress(&mut self) -> &mut ::protobuf::RepeatedField<IstioEgressListener> {
        &mut self.egress
    }

    // Take field
    pub fn take_egress(&mut self) -> ::protobuf::RepeatedField<IstioEgressListener> {
        ::std::mem::replace(&mut self.egress, ::protobuf::RepeatedField::new())
    }

    // .istio.networking.v1beta1.OutboundTrafficPolicy outbound_traffic_policy = 4;


    pub fn get_outbound_traffic_policy(&self) -> &OutboundTrafficPolicy {
        self.outbound_traffic_policy.as_ref().unwrap_or_else(|| <OutboundTrafficPolicy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_outbound_traffic_policy(&mut self) {
        self.outbound_traffic_policy.clear();
    }

    pub fn has_outbound_traffic_policy(&self) -> bool {
        self.outbound_traffic_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outbound_traffic_policy(&mut self, v: OutboundTrafficPolicy) {
        self.outbound_traffic_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outbound_traffic_policy(&mut self) -> &mut OutboundTrafficPolicy {
        if self.outbound_traffic_policy.is_none() {
            self.outbound_traffic_policy.set_default();
        }
        self.outbound_traffic_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_outbound_traffic_policy(&mut self) -> OutboundTrafficPolicy {
        self.outbound_traffic_policy.take().unwrap_or_else(|| OutboundTrafficPolicy::new())
    }
}

impl ::protobuf::Message for Sidecar {
    fn is_initialized(&self) -> bool {
        for v in &self.workload_selector {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ingress {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.egress {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outbound_traffic_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.workload_selector)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ingress)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.egress)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.outbound_traffic_policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.workload_selector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.ingress {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.egress {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.outbound_traffic_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.workload_selector.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.ingress {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.egress {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.outbound_traffic_policy.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Sidecar {
        Sidecar::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WorkloadSelector>>(
                "workload_selector",
                |m: &Sidecar| { &m.workload_selector },
                |m: &mut Sidecar| { &mut m.workload_selector },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IstioIngressListener>>(
                "ingress",
                |m: &Sidecar| { &m.ingress },
                |m: &mut Sidecar| { &mut m.ingress },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IstioEgressListener>>(
                "egress",
                |m: &Sidecar| { &m.egress },
                |m: &mut Sidecar| { &mut m.egress },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OutboundTrafficPolicy>>(
                "outbound_traffic_policy",
                |m: &Sidecar| { &m.outbound_traffic_policy },
                |m: &mut Sidecar| { &mut m.outbound_traffic_policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Sidecar>(
                "Sidecar",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Sidecar {
        static instance: ::protobuf::rt::LazyV2<Sidecar> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Sidecar::new)
    }
}

impl ::protobuf::Clear for Sidecar {
    fn clear(&mut self) {
        self.workload_selector.clear();
        self.ingress.clear();
        self.egress.clear();
        self.outbound_traffic_policy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Sidecar {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sidecar {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IstioIngressListener {
    // message fields
    pub port: ::protobuf::SingularPtrField<super::gateway::Port>,
    pub bind: ::std::string::String,
    pub capture_mode: CaptureMode,
    pub default_endpoint: ::std::string::String,
    pub tls: ::protobuf::SingularPtrField<super::gateway::ServerTLSSettings>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IstioIngressListener {
    fn default() -> &'a IstioIngressListener {
        <IstioIngressListener as ::protobuf::Message>::default_instance()
    }
}

impl IstioIngressListener {
    pub fn new() -> IstioIngressListener {
        ::std::default::Default::default()
    }

    // .istio.networking.v1beta1.Port port = 1;


    pub fn get_port(&self) -> &super::gateway::Port {
        self.port.as_ref().unwrap_or_else(|| <super::gateway::Port as ::protobuf::Message>::default_instance())
    }
    pub fn clear_port(&mut self) {
        self.port.clear();
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: super::gateway::Port) {
        self.port = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port(&mut self) -> &mut super::gateway::Port {
        if self.port.is_none() {
            self.port.set_default();
        }
        self.port.as_mut().unwrap()
    }

    // Take field
    pub fn take_port(&mut self) -> super::gateway::Port {
        self.port.take().unwrap_or_else(|| super::gateway::Port::new())
    }

    // string bind = 2;


    pub fn get_bind(&self) -> &str {
        &self.bind
    }
    pub fn clear_bind(&mut self) {
        self.bind.clear();
    }

    // Param is passed by value, moved
    pub fn set_bind(&mut self, v: ::std::string::String) {
        self.bind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bind(&mut self) -> &mut ::std::string::String {
        &mut self.bind
    }

    // Take field
    pub fn take_bind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bind, ::std::string::String::new())
    }

    // .istio.networking.v1beta1.CaptureMode capture_mode = 3;


    pub fn get_capture_mode(&self) -> CaptureMode {
        self.capture_mode
    }
    pub fn clear_capture_mode(&mut self) {
        self.capture_mode = CaptureMode::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_capture_mode(&mut self, v: CaptureMode) {
        self.capture_mode = v;
    }

    // string default_endpoint = 4;


    pub fn get_default_endpoint(&self) -> &str {
        &self.default_endpoint
    }
    pub fn clear_default_endpoint(&mut self) {
        self.default_endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_default_endpoint(&mut self, v: ::std::string::String) {
        self.default_endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.default_endpoint
    }

    // Take field
    pub fn take_default_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.default_endpoint, ::std::string::String::new())
    }

    // .istio.networking.v1beta1.ServerTLSSettings tls = 7;


    pub fn get_tls(&self) -> &super::gateway::ServerTLSSettings {
        self.tls.as_ref().unwrap_or_else(|| <super::gateway::ServerTLSSettings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tls(&mut self) {
        self.tls.clear();
    }

    pub fn has_tls(&self) -> bool {
        self.tls.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls(&mut self, v: super::gateway::ServerTLSSettings) {
        self.tls = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls(&mut self) -> &mut super::gateway::ServerTLSSettings {
        if self.tls.is_none() {
            self.tls.set_default();
        }
        self.tls.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls(&mut self) -> super::gateway::ServerTLSSettings {
        self.tls.take().unwrap_or_else(|| super::gateway::ServerTLSSettings::new())
    }
}

impl ::protobuf::Message for IstioIngressListener {
    fn is_initialized(&self) -> bool {
        for v in &self.port {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tls {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.port)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bind)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.capture_mode, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.default_endpoint)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.port.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.bind.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bind);
        }
        if self.capture_mode != CaptureMode::DEFAULT {
            my_size += ::protobuf::rt::enum_size(3, self.capture_mode);
        }
        if !self.default_endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.default_endpoint);
        }
        if let Some(ref v) = self.tls.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.port.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.bind.is_empty() {
            os.write_string(2, &self.bind)?;
        }
        if self.capture_mode != CaptureMode::DEFAULT {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.capture_mode))?;
        }
        if !self.default_endpoint.is_empty() {
            os.write_string(4, &self.default_endpoint)?;
        }
        if let Some(ref v) = self.tls.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IstioIngressListener {
        IstioIngressListener::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gateway::Port>>(
                "port",
                |m: &IstioIngressListener| { &m.port },
                |m: &mut IstioIngressListener| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bind",
                |m: &IstioIngressListener| { &m.bind },
                |m: &mut IstioIngressListener| { &mut m.bind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CaptureMode>>(
                "capture_mode",
                |m: &IstioIngressListener| { &m.capture_mode },
                |m: &mut IstioIngressListener| { &mut m.capture_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "default_endpoint",
                |m: &IstioIngressListener| { &m.default_endpoint },
                |m: &mut IstioIngressListener| { &mut m.default_endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gateway::ServerTLSSettings>>(
                "tls",
                |m: &IstioIngressListener| { &m.tls },
                |m: &mut IstioIngressListener| { &mut m.tls },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IstioIngressListener>(
                "IstioIngressListener",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IstioIngressListener {
        static instance: ::protobuf::rt::LazyV2<IstioIngressListener> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IstioIngressListener::new)
    }
}

impl ::protobuf::Clear for IstioIngressListener {
    fn clear(&mut self) {
        self.port.clear();
        self.bind.clear();
        self.capture_mode = CaptureMode::DEFAULT;
        self.default_endpoint.clear();
        self.tls.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IstioIngressListener {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IstioIngressListener {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IstioEgressListener {
    // message fields
    pub port: ::protobuf::SingularPtrField<super::gateway::Port>,
    pub bind: ::std::string::String,
    pub capture_mode: CaptureMode,
    pub hosts: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IstioEgressListener {
    fn default() -> &'a IstioEgressListener {
        <IstioEgressListener as ::protobuf::Message>::default_instance()
    }
}

impl IstioEgressListener {
    pub fn new() -> IstioEgressListener {
        ::std::default::Default::default()
    }

    // .istio.networking.v1beta1.Port port = 1;


    pub fn get_port(&self) -> &super::gateway::Port {
        self.port.as_ref().unwrap_or_else(|| <super::gateway::Port as ::protobuf::Message>::default_instance())
    }
    pub fn clear_port(&mut self) {
        self.port.clear();
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: super::gateway::Port) {
        self.port = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port(&mut self) -> &mut super::gateway::Port {
        if self.port.is_none() {
            self.port.set_default();
        }
        self.port.as_mut().unwrap()
    }

    // Take field
    pub fn take_port(&mut self) -> super::gateway::Port {
        self.port.take().unwrap_or_else(|| super::gateway::Port::new())
    }

    // string bind = 2;


    pub fn get_bind(&self) -> &str {
        &self.bind
    }
    pub fn clear_bind(&mut self) {
        self.bind.clear();
    }

    // Param is passed by value, moved
    pub fn set_bind(&mut self, v: ::std::string::String) {
        self.bind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bind(&mut self) -> &mut ::std::string::String {
        &mut self.bind
    }

    // Take field
    pub fn take_bind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bind, ::std::string::String::new())
    }

    // .istio.networking.v1beta1.CaptureMode capture_mode = 3;


    pub fn get_capture_mode(&self) -> CaptureMode {
        self.capture_mode
    }
    pub fn clear_capture_mode(&mut self) {
        self.capture_mode = CaptureMode::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_capture_mode(&mut self, v: CaptureMode) {
        self.capture_mode = v;
    }

    // repeated string hosts = 4;


    pub fn get_hosts(&self) -> &[::std::string::String] {
        &self.hosts
    }
    pub fn clear_hosts(&mut self) {
        self.hosts.clear();
    }

    // Param is passed by value, moved
    pub fn set_hosts(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.hosts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hosts(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.hosts
    }

    // Take field
    pub fn take_hosts(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.hosts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IstioEgressListener {
    fn is_initialized(&self) -> bool {
        for v in &self.port {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.port)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bind)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.capture_mode, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.hosts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.port.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.bind.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bind);
        }
        if self.capture_mode != CaptureMode::DEFAULT {
            my_size += ::protobuf::rt::enum_size(3, self.capture_mode);
        }
        for value in &self.hosts {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.port.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.bind.is_empty() {
            os.write_string(2, &self.bind)?;
        }
        if self.capture_mode != CaptureMode::DEFAULT {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.capture_mode))?;
        }
        for v in &self.hosts {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IstioEgressListener {
        IstioEgressListener::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::gateway::Port>>(
                "port",
                |m: &IstioEgressListener| { &m.port },
                |m: &mut IstioEgressListener| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bind",
                |m: &IstioEgressListener| { &m.bind },
                |m: &mut IstioEgressListener| { &mut m.bind },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CaptureMode>>(
                "capture_mode",
                |m: &IstioEgressListener| { &m.capture_mode },
                |m: &mut IstioEgressListener| { &mut m.capture_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hosts",
                |m: &IstioEgressListener| { &m.hosts },
                |m: &mut IstioEgressListener| { &mut m.hosts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IstioEgressListener>(
                "IstioEgressListener",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IstioEgressListener {
        static instance: ::protobuf::rt::LazyV2<IstioEgressListener> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IstioEgressListener::new)
    }
}

impl ::protobuf::Clear for IstioEgressListener {
    fn clear(&mut self) {
        self.port.clear();
        self.bind.clear();
        self.capture_mode = CaptureMode::DEFAULT;
        self.hosts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IstioEgressListener {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IstioEgressListener {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WorkloadSelector {
    // message fields
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorkloadSelector {
    fn default() -> &'a WorkloadSelector {
        <WorkloadSelector as ::protobuf::Message>::default_instance()
    }
}

impl WorkloadSelector {
    pub fn new() -> WorkloadSelector {
        ::std::default::Default::default()
    }

    // repeated .istio.networking.v1beta1.WorkloadSelector.LabelsEntry labels = 1;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for WorkloadSelector {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.labels);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.labels, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkloadSelector {
        WorkloadSelector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &WorkloadSelector| { &m.labels },
                |m: &mut WorkloadSelector| { &mut m.labels },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WorkloadSelector>(
                "WorkloadSelector",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WorkloadSelector {
        static instance: ::protobuf::rt::LazyV2<WorkloadSelector> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WorkloadSelector::new)
    }
}

impl ::protobuf::Clear for WorkloadSelector {
    fn clear(&mut self) {
        self.labels.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkloadSelector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkloadSelector {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutboundTrafficPolicy {
    // message fields
    pub mode: OutboundTrafficPolicy_Mode,
    pub egress_proxy: ::protobuf::SingularPtrField<super::virtual_service::Destination>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutboundTrafficPolicy {
    fn default() -> &'a OutboundTrafficPolicy {
        <OutboundTrafficPolicy as ::protobuf::Message>::default_instance()
    }
}

impl OutboundTrafficPolicy {
    pub fn new() -> OutboundTrafficPolicy {
        ::std::default::Default::default()
    }

    // .istio.networking.v1beta1.OutboundTrafficPolicy.Mode mode = 1;


    pub fn get_mode(&self) -> OutboundTrafficPolicy_Mode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = OutboundTrafficPolicy_Mode::REGISTRY_ONLY;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: OutboundTrafficPolicy_Mode) {
        self.mode = v;
    }

    // .istio.networking.v1beta1.Destination egress_proxy = 2;


    pub fn get_egress_proxy(&self) -> &super::virtual_service::Destination {
        self.egress_proxy.as_ref().unwrap_or_else(|| <super::virtual_service::Destination as ::protobuf::Message>::default_instance())
    }
    pub fn clear_egress_proxy(&mut self) {
        self.egress_proxy.clear();
    }

    pub fn has_egress_proxy(&self) -> bool {
        self.egress_proxy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_egress_proxy(&mut self, v: super::virtual_service::Destination) {
        self.egress_proxy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_egress_proxy(&mut self) -> &mut super::virtual_service::Destination {
        if self.egress_proxy.is_none() {
            self.egress_proxy.set_default();
        }
        self.egress_proxy.as_mut().unwrap()
    }

    // Take field
    pub fn take_egress_proxy(&mut self) -> super::virtual_service::Destination {
        self.egress_proxy.take().unwrap_or_else(|| super::virtual_service::Destination::new())
    }
}

impl ::protobuf::Message for OutboundTrafficPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.egress_proxy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.egress_proxy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mode != OutboundTrafficPolicy_Mode::REGISTRY_ONLY {
            my_size += ::protobuf::rt::enum_size(1, self.mode);
        }
        if let Some(ref v) = self.egress_proxy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.mode != OutboundTrafficPolicy_Mode::REGISTRY_ONLY {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        if let Some(ref v) = self.egress_proxy.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutboundTrafficPolicy {
        OutboundTrafficPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OutboundTrafficPolicy_Mode>>(
                "mode",
                |m: &OutboundTrafficPolicy| { &m.mode },
                |m: &mut OutboundTrafficPolicy| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::virtual_service::Destination>>(
                "egress_proxy",
                |m: &OutboundTrafficPolicy| { &m.egress_proxy },
                |m: &mut OutboundTrafficPolicy| { &mut m.egress_proxy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutboundTrafficPolicy>(
                "OutboundTrafficPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutboundTrafficPolicy {
        static instance: ::protobuf::rt::LazyV2<OutboundTrafficPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutboundTrafficPolicy::new)
    }
}

impl ::protobuf::Clear for OutboundTrafficPolicy {
    fn clear(&mut self) {
        self.mode = OutboundTrafficPolicy_Mode::REGISTRY_ONLY;
        self.egress_proxy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutboundTrafficPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutboundTrafficPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OutboundTrafficPolicy_Mode {
    REGISTRY_ONLY = 0,
    ALLOW_ANY = 1,
}

impl ::protobuf::ProtobufEnum for OutboundTrafficPolicy_Mode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OutboundTrafficPolicy_Mode> {
        match value {
            0 => ::std::option::Option::Some(OutboundTrafficPolicy_Mode::REGISTRY_ONLY),
            1 => ::std::option::Option::Some(OutboundTrafficPolicy_Mode::ALLOW_ANY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OutboundTrafficPolicy_Mode] = &[
            OutboundTrafficPolicy_Mode::REGISTRY_ONLY,
            OutboundTrafficPolicy_Mode::ALLOW_ANY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OutboundTrafficPolicy_Mode>("OutboundTrafficPolicy.Mode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OutboundTrafficPolicy_Mode {
}

impl ::std::default::Default for OutboundTrafficPolicy_Mode {
    fn default() -> Self {
        OutboundTrafficPolicy_Mode::REGISTRY_ONLY
    }
}

impl ::protobuf::reflect::ProtobufValue for OutboundTrafficPolicy_Mode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CaptureMode {
    DEFAULT = 0,
    IPTABLES = 1,
    NONE = 2,
}

impl ::protobuf::ProtobufEnum for CaptureMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CaptureMode> {
        match value {
            0 => ::std::option::Option::Some(CaptureMode::DEFAULT),
            1 => ::std::option::Option::Some(CaptureMode::IPTABLES),
            2 => ::std::option::Option::Some(CaptureMode::NONE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CaptureMode] = &[
            CaptureMode::DEFAULT,
            CaptureMode::IPTABLES,
            CaptureMode::NONE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CaptureMode>("CaptureMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CaptureMode {
}

impl ::std::default::Default for CaptureMode {
    fn default() -> Self {
        CaptureMode::DEFAULT
    }
}

impl ::protobuf::reflect::ProtobufValue for CaptureMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20networking/v1beta1/sidecar.proto\x12\x18istio.networking.v1beta1\
    \x1a\x1fgoogle/api/field_behavior.proto\x1a\x20networking/v1beta1/gatewa\
    y.proto\x1a(networking/v1beta1/virtual_service.proto\"\xf3\x02\n\x07Side\
    car\x12W\n\x11workload_selector\x18\x01\x20\x01(\x0b2*.istio.networking.\
    v1beta1.WorkloadSelectorR\x10workloadSelector\x12H\n\x07ingress\x18\x02\
    \x20\x03(\x0b2..istio.networking.v1beta1.IstioIngressListenerR\x07ingres\
    s\x12E\n\x06egress\x18\x03\x20\x03(\x0b2-.istio.networking.v1beta1.Istio\
    EgressListenerR\x06egress\x12g\n\x17outbound_traffic_policy\x18\x04\x20\
    \x01(\x0b2/.istio.networking.v1beta1.OutboundTrafficPolicyR\x15outboundT\
    rafficPolicyJ\x04\x08\x05\x10\x06J\x04\x08\x06\x10\x07R\tlocalhost\"\xbe\
    \x02\n\x14IstioIngressListener\x127\n\x04port\x18\x01\x20\x01(\x0b2\x1e.\
    istio.networking.v1beta1.PortR\x04portB\x03\xe0A\x02\x12\x12\n\x04bind\
    \x18\x02\x20\x01(\tR\x04bind\x12H\n\x0ccapture_mode\x18\x03\x20\x01(\x0e\
    2%.istio.networking.v1beta1.CaptureModeR\x0bcaptureMode\x12.\n\x10defaul\
    t_endpoint\x18\x04\x20\x01(\tR\x0fdefaultEndpointB\x03\xe0A\x02\x12=\n\
    \x03tls\x18\x07\x20\x01(\x0b2+.istio.networking.v1beta1.ServerTLSSetting\
    sR\x03tlsJ\x04\x08\x05\x10\x06J\x04\x08\x06\x10\x07R\x14localhost_client\
    _tls\"\xe4\x01\n\x13IstioEgressListener\x122\n\x04port\x18\x01\x20\x01(\
    \x0b2\x1e.istio.networking.v1beta1.PortR\x04port\x12\x12\n\x04bind\x18\
    \x02\x20\x01(\tR\x04bind\x12H\n\x0ccapture_mode\x18\x03\x20\x01(\x0e2%.i\
    stio.networking.v1beta1.CaptureModeR\x0bcaptureMode\x12\x19\n\x05hosts\
    \x18\x04\x20\x03(\tR\x05hostsB\x03\xe0A\x02J\x04\x08\x05\x10\x06J\x04\
    \x08\x06\x10\x07R\x14localhost_server_tls\"\xa2\x01\n\x10WorkloadSelecto\
    r\x12S\n\x06labels\x18\x01\x20\x03(\x0b26.istio.networking.v1beta1.Workl\
    oadSelector.LabelsEntryR\x06labelsB\x03\xe0A\x02\x1a9\n\x0bLabelsEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01\"\xd5\x01\n\x15OutboundTrafficPolicy\x12\
    H\n\x04mode\x18\x01\x20\x01(\x0e24.istio.networking.v1beta1.OutboundTraf\
    ficPolicy.ModeR\x04mode\x12H\n\x0cegress_proxy\x18\x02\x20\x01(\x0b2%.is\
    tio.networking.v1beta1.DestinationR\x0begressProxy\"(\n\x04Mode\x12\x11\
    \n\rREGISTRY_ONLY\x10\0\x12\r\n\tALLOW_ANY\x10\x01*2\n\x0bCaptureMode\
    \x12\x0b\n\x07DEFAULT\x10\0\x12\x0c\n\x08IPTABLES\x10\x01\x12\x08\n\x04N\
    ONE\x10\x02B!Z\x1fistio.io/api/networking/v1beta1b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
