// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `networking/v1beta1/workload_entry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct WorkloadEntry {
    // message fields
    pub address: ::std::string::String,
    pub ports: ::std::collections::HashMap<::std::string::String, u32>,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub network: ::std::string::String,
    pub locality: ::std::string::String,
    pub weight: u32,
    pub service_account: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WorkloadEntry {
    fn default() -> &'a WorkloadEntry {
        <WorkloadEntry as ::protobuf::Message>::default_instance()
    }
}

impl WorkloadEntry {
    pub fn new() -> WorkloadEntry {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // repeated .istio.networking.v1beta1.WorkloadEntry.PortsEntry ports = 2;


    pub fn get_ports(&self) -> &::std::collections::HashMap<::std::string::String, u32> {
        &self.ports
    }
    pub fn clear_ports(&mut self) {
        self.ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_ports(&mut self, v: ::std::collections::HashMap<::std::string::String, u32>) {
        self.ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ports(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, u32> {
        &mut self.ports
    }

    // Take field
    pub fn take_ports(&mut self) -> ::std::collections::HashMap<::std::string::String, u32> {
        ::std::mem::replace(&mut self.ports, ::std::collections::HashMap::new())
    }

    // repeated .istio.networking.v1beta1.WorkloadEntry.LabelsEntry labels = 3;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // string network = 4;


    pub fn get_network(&self) -> &str {
        &self.network
    }
    pub fn clear_network(&mut self) {
        self.network.clear();
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: ::std::string::String) {
        self.network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network(&mut self) -> &mut ::std::string::String {
        &mut self.network
    }

    // Take field
    pub fn take_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network, ::std::string::String::new())
    }

    // string locality = 5;


    pub fn get_locality(&self) -> &str {
        &self.locality
    }
    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: ::std::string::String) {
        self.locality = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut ::std::string::String {
        &mut self.locality
    }

    // Take field
    pub fn take_locality(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.locality, ::std::string::String::new())
    }

    // uint32 weight = 6;


    pub fn get_weight(&self) -> u32 {
        self.weight
    }
    pub fn clear_weight(&mut self) {
        self.weight = 0;
    }

    // Param is passed by value, moved
    pub fn set_weight(&mut self, v: u32) {
        self.weight = v;
    }

    // string service_account = 7;


    pub fn get_service_account(&self) -> &str {
        &self.service_account
    }
    pub fn clear_service_account(&mut self) {
        self.service_account.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_account(&mut self, v: ::std::string::String) {
        self.service_account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_account(&mut self) -> &mut ::std::string::String {
        &mut self.service_account
    }

    // Take field
    pub fn take_service_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_account, ::std::string::String::new())
    }
}

impl ::protobuf::Message for WorkloadEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeUint32>(wire_type, is, &mut self.ports)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.locality)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.weight = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeUint32>(2, &self.ports);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.labels);
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.network);
        }
        if !self.locality.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.locality);
        }
        if self.weight != 0 {
            my_size += ::protobuf::rt::value_size(6, self.weight, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.service_account.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.service_account);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeUint32>(2, &self.ports, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.labels, os)?;
        if !self.network.is_empty() {
            os.write_string(4, &self.network)?;
        }
        if !self.locality.is_empty() {
            os.write_string(5, &self.locality)?;
        }
        if self.weight != 0 {
            os.write_uint32(6, self.weight)?;
        }
        if !self.service_account.is_empty() {
            os.write_string(7, &self.service_account)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WorkloadEntry {
        WorkloadEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &WorkloadEntry| { &m.address },
                |m: &mut WorkloadEntry| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeUint32>(
                "ports",
                |m: &WorkloadEntry| { &m.ports },
                |m: &mut WorkloadEntry| { &mut m.ports },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &WorkloadEntry| { &m.labels },
                |m: &mut WorkloadEntry| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "network",
                |m: &WorkloadEntry| { &m.network },
                |m: &mut WorkloadEntry| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "locality",
                |m: &WorkloadEntry| { &m.locality },
                |m: &mut WorkloadEntry| { &mut m.locality },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "weight",
                |m: &WorkloadEntry| { &m.weight },
                |m: &mut WorkloadEntry| { &mut m.weight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_account",
                |m: &WorkloadEntry| { &m.service_account },
                |m: &mut WorkloadEntry| { &mut m.service_account },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WorkloadEntry>(
                "WorkloadEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WorkloadEntry {
        static instance: ::protobuf::rt::LazyV2<WorkloadEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WorkloadEntry::new)
    }
}

impl ::protobuf::Clear for WorkloadEntry {
    fn clear(&mut self) {
        self.address.clear();
        self.ports.clear();
        self.labels.clear();
        self.network.clear();
        self.locality.clear();
        self.weight = 0;
        self.service_account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WorkloadEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WorkloadEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'networking/v1beta1/workload_entry.proto\x12\x18istio.networking.v1bet\
    a1\x1a\x1fgoogle/api/field_behavior.proto\"\xb1\x03\n\rWorkloadEntry\x12\
    \x1d\n\x07address\x18\x01\x20\x01(\tR\x07addressB\x03\xe0A\x02\x12H\n\
    \x05ports\x18\x02\x20\x03(\x0b22.istio.networking.v1beta1.WorkloadEntry.\
    PortsEntryR\x05ports\x12K\n\x06labels\x18\x03\x20\x03(\x0b23.istio.netwo\
    rking.v1beta1.WorkloadEntry.LabelsEntryR\x06labels\x12\x18\n\x07network\
    \x18\x04\x20\x01(\tR\x07network\x12\x1a\n\x08locality\x18\x05\x20\x01(\t\
    R\x08locality\x12\x16\n\x06weight\x18\x06\x20\x01(\rR\x06weight\x12'\n\
    \x0fservice_account\x18\x07\x20\x01(\tR\x0eserviceAccount\x1a8\n\nPortsE\
    ntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\rR\x05value:\x028\x01\x1a9\n\x0bLabelsEntry\x12\x10\n\x03k\
    ey\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05\
    value:\x028\x01B!Z\x1fistio.io/api/networking/v1beta1b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
