// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `networking/v1beta1/gateway.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Gateway {
    // message fields
    pub servers: ::protobuf::RepeatedField<Server>,
    pub selector: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gateway {
    fn default() -> &'a Gateway {
        <Gateway as ::protobuf::Message>::default_instance()
    }
}

impl Gateway {
    pub fn new() -> Gateway {
        ::std::default::Default::default()
    }

    // repeated .istio.networking.v1beta1.Server servers = 1;


    pub fn get_servers(&self) -> &[Server] {
        &self.servers
    }
    pub fn clear_servers(&mut self) {
        self.servers.clear();
    }

    // Param is passed by value, moved
    pub fn set_servers(&mut self, v: ::protobuf::RepeatedField<Server>) {
        self.servers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_servers(&mut self) -> &mut ::protobuf::RepeatedField<Server> {
        &mut self.servers
    }

    // Take field
    pub fn take_servers(&mut self) -> ::protobuf::RepeatedField<Server> {
        ::std::mem::replace(&mut self.servers, ::protobuf::RepeatedField::new())
    }

    // repeated .istio.networking.v1beta1.Gateway.SelectorEntry selector = 2;


    pub fn get_selector(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.selector
    }
    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    pub fn mut_selector(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.selector, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Gateway {
    fn is_initialized(&self) -> bool {
        for v in &self.servers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.servers)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.selector)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.servers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.selector);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.servers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.selector, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gateway {
        Gateway::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Server>>(
                "servers",
                |m: &Gateway| { &m.servers },
                |m: &mut Gateway| { &mut m.servers },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "selector",
                |m: &Gateway| { &m.selector },
                |m: &mut Gateway| { &mut m.selector },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Gateway>(
                "Gateway",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Gateway {
        static instance: ::protobuf::rt::LazyV2<Gateway> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Gateway::new)
    }
}

impl ::protobuf::Clear for Gateway {
    fn clear(&mut self) {
        self.servers.clear();
        self.selector.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gateway {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gateway {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Server {
    // message fields
    pub port: ::protobuf::SingularPtrField<Port>,
    pub bind: ::std::string::String,
    pub hosts: ::protobuf::RepeatedField<::std::string::String>,
    pub tls: ::protobuf::SingularPtrField<ServerTLSSettings>,
    pub default_endpoint: ::std::string::String,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Server {
    fn default() -> &'a Server {
        <Server as ::protobuf::Message>::default_instance()
    }
}

impl Server {
    pub fn new() -> Server {
        ::std::default::Default::default()
    }

    // .istio.networking.v1beta1.Port port = 1;


    pub fn get_port(&self) -> &Port {
        self.port.as_ref().unwrap_or_else(|| <Port as ::protobuf::Message>::default_instance())
    }
    pub fn clear_port(&mut self) {
        self.port.clear();
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: Port) {
        self.port = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port(&mut self) -> &mut Port {
        if self.port.is_none() {
            self.port.set_default();
        }
        self.port.as_mut().unwrap()
    }

    // Take field
    pub fn take_port(&mut self) -> Port {
        self.port.take().unwrap_or_else(|| Port::new())
    }

    // string bind = 4;


    pub fn get_bind(&self) -> &str {
        &self.bind
    }
    pub fn clear_bind(&mut self) {
        self.bind.clear();
    }

    // Param is passed by value, moved
    pub fn set_bind(&mut self, v: ::std::string::String) {
        self.bind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bind(&mut self) -> &mut ::std::string::String {
        &mut self.bind
    }

    // Take field
    pub fn take_bind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bind, ::std::string::String::new())
    }

    // repeated string hosts = 2;


    pub fn get_hosts(&self) -> &[::std::string::String] {
        &self.hosts
    }
    pub fn clear_hosts(&mut self) {
        self.hosts.clear();
    }

    // Param is passed by value, moved
    pub fn set_hosts(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.hosts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hosts(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.hosts
    }

    // Take field
    pub fn take_hosts(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.hosts, ::protobuf::RepeatedField::new())
    }

    // .istio.networking.v1beta1.ServerTLSSettings tls = 3;


    pub fn get_tls(&self) -> &ServerTLSSettings {
        self.tls.as_ref().unwrap_or_else(|| <ServerTLSSettings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tls(&mut self) {
        self.tls.clear();
    }

    pub fn has_tls(&self) -> bool {
        self.tls.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls(&mut self, v: ServerTLSSettings) {
        self.tls = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls(&mut self) -> &mut ServerTLSSettings {
        if self.tls.is_none() {
            self.tls.set_default();
        }
        self.tls.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls(&mut self) -> ServerTLSSettings {
        self.tls.take().unwrap_or_else(|| ServerTLSSettings::new())
    }

    // string default_endpoint = 5;


    pub fn get_default_endpoint(&self) -> &str {
        &self.default_endpoint
    }
    pub fn clear_default_endpoint(&mut self) {
        self.default_endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_default_endpoint(&mut self, v: ::std::string::String) {
        self.default_endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.default_endpoint
    }

    // Take field
    pub fn take_default_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.default_endpoint, ::std::string::String::new())
    }

    // string name = 6;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Server {
    fn is_initialized(&self) -> bool {
        for v in &self.port {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tls {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.port)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bind)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.hosts)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.default_endpoint)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.port.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.bind.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.bind);
        }
        for value in &self.hosts {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if let Some(ref v) = self.tls.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.default_endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.default_endpoint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.port.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.bind.is_empty() {
            os.write_string(4, &self.bind)?;
        }
        for v in &self.hosts {
            os.write_string(2, &v)?;
        };
        if let Some(ref v) = self.tls.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.default_endpoint.is_empty() {
            os.write_string(5, &self.default_endpoint)?;
        }
        if !self.name.is_empty() {
            os.write_string(6, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Server {
        Server::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Port>>(
                "port",
                |m: &Server| { &m.port },
                |m: &mut Server| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "bind",
                |m: &Server| { &m.bind },
                |m: &mut Server| { &mut m.bind },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hosts",
                |m: &Server| { &m.hosts },
                |m: &mut Server| { &mut m.hosts },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ServerTLSSettings>>(
                "tls",
                |m: &Server| { &m.tls },
                |m: &mut Server| { &mut m.tls },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "default_endpoint",
                |m: &Server| { &m.default_endpoint },
                |m: &mut Server| { &mut m.default_endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Server| { &m.name },
                |m: &mut Server| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Server>(
                "Server",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Server {
        static instance: ::protobuf::rt::LazyV2<Server> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Server::new)
    }
}

impl ::protobuf::Clear for Server {
    fn clear(&mut self) {
        self.port.clear();
        self.bind.clear();
        self.hosts.clear();
        self.tls.clear();
        self.default_endpoint.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Server {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Server {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Port {
    // message fields
    pub number: u32,
    pub protocol: ::std::string::String,
    pub name: ::std::string::String,
    pub target_port: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Port {
    fn default() -> &'a Port {
        <Port as ::protobuf::Message>::default_instance()
    }
}

impl Port {
    pub fn new() -> Port {
        ::std::default::Default::default()
    }

    // uint32 number = 1;


    pub fn get_number(&self) -> u32 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: u32) {
        self.number = v;
    }

    // string protocol = 2;


    pub fn get_protocol(&self) -> &str {
        &self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        &mut self.protocol
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.protocol, ::std::string::String::new())
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint32 target_port = 4;


    pub fn get_target_port(&self) -> u32 {
        self.target_port
    }
    pub fn clear_target_port(&mut self) {
        self.target_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_port(&mut self, v: u32) {
        self.target_port = v;
    }
}

impl ::protobuf::Message for Port {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.number = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.protocol)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.target_port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(1, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.protocol);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.target_port != 0 {
            my_size += ::protobuf::rt::value_size(4, self.target_port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.number != 0 {
            os.write_uint32(1, self.number)?;
        }
        if !self.protocol.is_empty() {
            os.write_string(2, &self.protocol)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.target_port != 0 {
            os.write_uint32(4, self.target_port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Port {
        Port::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "number",
                |m: &Port| { &m.number },
                |m: &mut Port| { &mut m.number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &Port| { &m.protocol },
                |m: &mut Port| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Port| { &m.name },
                |m: &mut Port| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "target_port",
                |m: &Port| { &m.target_port },
                |m: &mut Port| { &mut m.target_port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Port>(
                "Port",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Port {
        static instance: ::protobuf::rt::LazyV2<Port> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Port::new)
    }
}

impl ::protobuf::Clear for Port {
    fn clear(&mut self) {
        self.number = 0;
        self.protocol.clear();
        self.name.clear();
        self.target_port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Port {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Port {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerTLSSettings {
    // message fields
    pub https_redirect: bool,
    pub mode: ServerTLSSettings_TLSmode,
    pub server_certificate: ::std::string::String,
    pub private_key: ::std::string::String,
    pub ca_certificates: ::std::string::String,
    pub credential_name: ::std::string::String,
    pub subject_alt_names: ::protobuf::RepeatedField<::std::string::String>,
    pub verify_certificate_spki: ::protobuf::RepeatedField<::std::string::String>,
    pub verify_certificate_hash: ::protobuf::RepeatedField<::std::string::String>,
    pub min_protocol_version: ServerTLSSettings_TLSProtocol,
    pub max_protocol_version: ServerTLSSettings_TLSProtocol,
    pub cipher_suites: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerTLSSettings {
    fn default() -> &'a ServerTLSSettings {
        <ServerTLSSettings as ::protobuf::Message>::default_instance()
    }
}

impl ServerTLSSettings {
    pub fn new() -> ServerTLSSettings {
        ::std::default::Default::default()
    }

    // bool https_redirect = 1;


    pub fn get_https_redirect(&self) -> bool {
        self.https_redirect
    }
    pub fn clear_https_redirect(&mut self) {
        self.https_redirect = false;
    }

    // Param is passed by value, moved
    pub fn set_https_redirect(&mut self, v: bool) {
        self.https_redirect = v;
    }

    // .istio.networking.v1beta1.ServerTLSSettings.TLSmode mode = 2;


    pub fn get_mode(&self) -> ServerTLSSettings_TLSmode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = ServerTLSSettings_TLSmode::PASSTHROUGH;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: ServerTLSSettings_TLSmode) {
        self.mode = v;
    }

    // string server_certificate = 3;


    pub fn get_server_certificate(&self) -> &str {
        &self.server_certificate
    }
    pub fn clear_server_certificate(&mut self) {
        self.server_certificate.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_certificate(&mut self, v: ::std::string::String) {
        self.server_certificate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_certificate(&mut self) -> &mut ::std::string::String {
        &mut self.server_certificate
    }

    // Take field
    pub fn take_server_certificate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.server_certificate, ::std::string::String::new())
    }

    // string private_key = 4;


    pub fn get_private_key(&self) -> &str {
        &self.private_key
    }
    pub fn clear_private_key(&mut self) {
        self.private_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_private_key(&mut self, v: ::std::string::String) {
        self.private_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key(&mut self) -> &mut ::std::string::String {
        &mut self.private_key
    }

    // Take field
    pub fn take_private_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.private_key, ::std::string::String::new())
    }

    // string ca_certificates = 5;


    pub fn get_ca_certificates(&self) -> &str {
        &self.ca_certificates
    }
    pub fn clear_ca_certificates(&mut self) {
        self.ca_certificates.clear();
    }

    // Param is passed by value, moved
    pub fn set_ca_certificates(&mut self, v: ::std::string::String) {
        self.ca_certificates = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ca_certificates(&mut self) -> &mut ::std::string::String {
        &mut self.ca_certificates
    }

    // Take field
    pub fn take_ca_certificates(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ca_certificates, ::std::string::String::new())
    }

    // string credential_name = 10;


    pub fn get_credential_name(&self) -> &str {
        &self.credential_name
    }
    pub fn clear_credential_name(&mut self) {
        self.credential_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_credential_name(&mut self, v: ::std::string::String) {
        self.credential_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credential_name(&mut self) -> &mut ::std::string::String {
        &mut self.credential_name
    }

    // Take field
    pub fn take_credential_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.credential_name, ::std::string::String::new())
    }

    // repeated string subject_alt_names = 6;


    pub fn get_subject_alt_names(&self) -> &[::std::string::String] {
        &self.subject_alt_names
    }
    pub fn clear_subject_alt_names(&mut self) {
        self.subject_alt_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject_alt_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.subject_alt_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subject_alt_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.subject_alt_names
    }

    // Take field
    pub fn take_subject_alt_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.subject_alt_names, ::protobuf::RepeatedField::new())
    }

    // repeated string verify_certificate_spki = 11;


    pub fn get_verify_certificate_spki(&self) -> &[::std::string::String] {
        &self.verify_certificate_spki
    }
    pub fn clear_verify_certificate_spki(&mut self) {
        self.verify_certificate_spki.clear();
    }

    // Param is passed by value, moved
    pub fn set_verify_certificate_spki(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.verify_certificate_spki = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verify_certificate_spki(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.verify_certificate_spki
    }

    // Take field
    pub fn take_verify_certificate_spki(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.verify_certificate_spki, ::protobuf::RepeatedField::new())
    }

    // repeated string verify_certificate_hash = 12;


    pub fn get_verify_certificate_hash(&self) -> &[::std::string::String] {
        &self.verify_certificate_hash
    }
    pub fn clear_verify_certificate_hash(&mut self) {
        self.verify_certificate_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_verify_certificate_hash(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.verify_certificate_hash = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verify_certificate_hash(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.verify_certificate_hash
    }

    // Take field
    pub fn take_verify_certificate_hash(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.verify_certificate_hash, ::protobuf::RepeatedField::new())
    }

    // .istio.networking.v1beta1.ServerTLSSettings.TLSProtocol min_protocol_version = 7;


    pub fn get_min_protocol_version(&self) -> ServerTLSSettings_TLSProtocol {
        self.min_protocol_version
    }
    pub fn clear_min_protocol_version(&mut self) {
        self.min_protocol_version = ServerTLSSettings_TLSProtocol::TLS_AUTO;
    }

    // Param is passed by value, moved
    pub fn set_min_protocol_version(&mut self, v: ServerTLSSettings_TLSProtocol) {
        self.min_protocol_version = v;
    }

    // .istio.networking.v1beta1.ServerTLSSettings.TLSProtocol max_protocol_version = 8;


    pub fn get_max_protocol_version(&self) -> ServerTLSSettings_TLSProtocol {
        self.max_protocol_version
    }
    pub fn clear_max_protocol_version(&mut self) {
        self.max_protocol_version = ServerTLSSettings_TLSProtocol::TLS_AUTO;
    }

    // Param is passed by value, moved
    pub fn set_max_protocol_version(&mut self, v: ServerTLSSettings_TLSProtocol) {
        self.max_protocol_version = v;
    }

    // repeated string cipher_suites = 9;


    pub fn get_cipher_suites(&self) -> &[::std::string::String] {
        &self.cipher_suites
    }
    pub fn clear_cipher_suites(&mut self) {
        self.cipher_suites.clear();
    }

    // Param is passed by value, moved
    pub fn set_cipher_suites(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cipher_suites = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cipher_suites(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cipher_suites
    }

    // Take field
    pub fn take_cipher_suites(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cipher_suites, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ServerTLSSettings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.https_redirect = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.server_certificate)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.private_key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ca_certificates)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.credential_name)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.subject_alt_names)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.verify_certificate_spki)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.verify_certificate_hash)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.min_protocol_version, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.max_protocol_version, 8, &mut self.unknown_fields)?
                },
                9 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cipher_suites)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.https_redirect != false {
            my_size += 2;
        }
        if self.mode != ServerTLSSettings_TLSmode::PASSTHROUGH {
            my_size += ::protobuf::rt::enum_size(2, self.mode);
        }
        if !self.server_certificate.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.server_certificate);
        }
        if !self.private_key.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.private_key);
        }
        if !self.ca_certificates.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ca_certificates);
        }
        if !self.credential_name.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.credential_name);
        }
        for value in &self.subject_alt_names {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        for value in &self.verify_certificate_spki {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        for value in &self.verify_certificate_hash {
            my_size += ::protobuf::rt::string_size(12, &value);
        };
        if self.min_protocol_version != ServerTLSSettings_TLSProtocol::TLS_AUTO {
            my_size += ::protobuf::rt::enum_size(7, self.min_protocol_version);
        }
        if self.max_protocol_version != ServerTLSSettings_TLSProtocol::TLS_AUTO {
            my_size += ::protobuf::rt::enum_size(8, self.max_protocol_version);
        }
        for value in &self.cipher_suites {
            my_size += ::protobuf::rt::string_size(9, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.https_redirect != false {
            os.write_bool(1, self.https_redirect)?;
        }
        if self.mode != ServerTLSSettings_TLSmode::PASSTHROUGH {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        if !self.server_certificate.is_empty() {
            os.write_string(3, &self.server_certificate)?;
        }
        if !self.private_key.is_empty() {
            os.write_string(4, &self.private_key)?;
        }
        if !self.ca_certificates.is_empty() {
            os.write_string(5, &self.ca_certificates)?;
        }
        if !self.credential_name.is_empty() {
            os.write_string(10, &self.credential_name)?;
        }
        for v in &self.subject_alt_names {
            os.write_string(6, &v)?;
        };
        for v in &self.verify_certificate_spki {
            os.write_string(11, &v)?;
        };
        for v in &self.verify_certificate_hash {
            os.write_string(12, &v)?;
        };
        if self.min_protocol_version != ServerTLSSettings_TLSProtocol::TLS_AUTO {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.min_protocol_version))?;
        }
        if self.max_protocol_version != ServerTLSSettings_TLSProtocol::TLS_AUTO {
            os.write_enum(8, ::protobuf::ProtobufEnum::value(&self.max_protocol_version))?;
        }
        for v in &self.cipher_suites {
            os.write_string(9, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerTLSSettings {
        ServerTLSSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "https_redirect",
                |m: &ServerTLSSettings| { &m.https_redirect },
                |m: &mut ServerTLSSettings| { &mut m.https_redirect },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ServerTLSSettings_TLSmode>>(
                "mode",
                |m: &ServerTLSSettings| { &m.mode },
                |m: &mut ServerTLSSettings| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "server_certificate",
                |m: &ServerTLSSettings| { &m.server_certificate },
                |m: &mut ServerTLSSettings| { &mut m.server_certificate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "private_key",
                |m: &ServerTLSSettings| { &m.private_key },
                |m: &mut ServerTLSSettings| { &mut m.private_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ca_certificates",
                |m: &ServerTLSSettings| { &m.ca_certificates },
                |m: &mut ServerTLSSettings| { &mut m.ca_certificates },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "credential_name",
                |m: &ServerTLSSettings| { &m.credential_name },
                |m: &mut ServerTLSSettings| { &mut m.credential_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject_alt_names",
                |m: &ServerTLSSettings| { &m.subject_alt_names },
                |m: &mut ServerTLSSettings| { &mut m.subject_alt_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "verify_certificate_spki",
                |m: &ServerTLSSettings| { &m.verify_certificate_spki },
                |m: &mut ServerTLSSettings| { &mut m.verify_certificate_spki },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "verify_certificate_hash",
                |m: &ServerTLSSettings| { &m.verify_certificate_hash },
                |m: &mut ServerTLSSettings| { &mut m.verify_certificate_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ServerTLSSettings_TLSProtocol>>(
                "min_protocol_version",
                |m: &ServerTLSSettings| { &m.min_protocol_version },
                |m: &mut ServerTLSSettings| { &mut m.min_protocol_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ServerTLSSettings_TLSProtocol>>(
                "max_protocol_version",
                |m: &ServerTLSSettings| { &m.max_protocol_version },
                |m: &mut ServerTLSSettings| { &mut m.max_protocol_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cipher_suites",
                |m: &ServerTLSSettings| { &m.cipher_suites },
                |m: &mut ServerTLSSettings| { &mut m.cipher_suites },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerTLSSettings>(
                "ServerTLSSettings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerTLSSettings {
        static instance: ::protobuf::rt::LazyV2<ServerTLSSettings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerTLSSettings::new)
    }
}

impl ::protobuf::Clear for ServerTLSSettings {
    fn clear(&mut self) {
        self.https_redirect = false;
        self.mode = ServerTLSSettings_TLSmode::PASSTHROUGH;
        self.server_certificate.clear();
        self.private_key.clear();
        self.ca_certificates.clear();
        self.credential_name.clear();
        self.subject_alt_names.clear();
        self.verify_certificate_spki.clear();
        self.verify_certificate_hash.clear();
        self.min_protocol_version = ServerTLSSettings_TLSProtocol::TLS_AUTO;
        self.max_protocol_version = ServerTLSSettings_TLSProtocol::TLS_AUTO;
        self.cipher_suites.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerTLSSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerTLSSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ServerTLSSettings_TLSmode {
    PASSTHROUGH = 0,
    SIMPLE = 1,
    MUTUAL = 2,
    AUTO_PASSTHROUGH = 3,
    ISTIO_MUTUAL = 4,
}

impl ::protobuf::ProtobufEnum for ServerTLSSettings_TLSmode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ServerTLSSettings_TLSmode> {
        match value {
            0 => ::std::option::Option::Some(ServerTLSSettings_TLSmode::PASSTHROUGH),
            1 => ::std::option::Option::Some(ServerTLSSettings_TLSmode::SIMPLE),
            2 => ::std::option::Option::Some(ServerTLSSettings_TLSmode::MUTUAL),
            3 => ::std::option::Option::Some(ServerTLSSettings_TLSmode::AUTO_PASSTHROUGH),
            4 => ::std::option::Option::Some(ServerTLSSettings_TLSmode::ISTIO_MUTUAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ServerTLSSettings_TLSmode] = &[
            ServerTLSSettings_TLSmode::PASSTHROUGH,
            ServerTLSSettings_TLSmode::SIMPLE,
            ServerTLSSettings_TLSmode::MUTUAL,
            ServerTLSSettings_TLSmode::AUTO_PASSTHROUGH,
            ServerTLSSettings_TLSmode::ISTIO_MUTUAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ServerTLSSettings_TLSmode>("ServerTLSSettings.TLSmode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ServerTLSSettings_TLSmode {
}

impl ::std::default::Default for ServerTLSSettings_TLSmode {
    fn default() -> Self {
        ServerTLSSettings_TLSmode::PASSTHROUGH
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerTLSSettings_TLSmode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ServerTLSSettings_TLSProtocol {
    TLS_AUTO = 0,
    TLSV1_0 = 1,
    TLSV1_1 = 2,
    TLSV1_2 = 3,
    TLSV1_3 = 4,
}

impl ::protobuf::ProtobufEnum for ServerTLSSettings_TLSProtocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ServerTLSSettings_TLSProtocol> {
        match value {
            0 => ::std::option::Option::Some(ServerTLSSettings_TLSProtocol::TLS_AUTO),
            1 => ::std::option::Option::Some(ServerTLSSettings_TLSProtocol::TLSV1_0),
            2 => ::std::option::Option::Some(ServerTLSSettings_TLSProtocol::TLSV1_1),
            3 => ::std::option::Option::Some(ServerTLSSettings_TLSProtocol::TLSV1_2),
            4 => ::std::option::Option::Some(ServerTLSSettings_TLSProtocol::TLSV1_3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ServerTLSSettings_TLSProtocol] = &[
            ServerTLSSettings_TLSProtocol::TLS_AUTO,
            ServerTLSSettings_TLSProtocol::TLSV1_0,
            ServerTLSSettings_TLSProtocol::TLSV1_1,
            ServerTLSSettings_TLSProtocol::TLSV1_2,
            ServerTLSSettings_TLSProtocol::TLSV1_3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ServerTLSSettings_TLSProtocol>("ServerTLSSettings.TLSProtocol", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ServerTLSSettings_TLSProtocol {
}

impl ::std::default::Default for ServerTLSSettings_TLSProtocol {
    fn default() -> Self {
        ServerTLSSettings_TLSProtocol::TLS_AUTO
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerTLSSettings_TLSProtocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20networking/v1beta1/gateway.proto\x12\x18istio.networking.v1beta1\
    \x1a\x1fgoogle/api/field_behavior.proto\"\xd9\x01\n\x07Gateway\x12?\n\
    \x07servers\x18\x01\x20\x03(\x0b2\x20.istio.networking.v1beta1.ServerR\
    \x07serversB\x03\xe0A\x02\x12P\n\x08selector\x18\x02\x20\x03(\x0b2/.isti\
    o.networking.v1beta1.Gateway.SelectorEntryR\x08selectorB\x03\xe0A\x02\
    \x1a;\n\rSelectorEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    \x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xee\x01\n\x06Se\
    rver\x127\n\x04port\x18\x01\x20\x01(\x0b2\x1e.istio.networking.v1beta1.P\
    ortR\x04portB\x03\xe0A\x02\x12\x12\n\x04bind\x18\x04\x20\x01(\tR\x04bind\
    \x12\x19\n\x05hosts\x18\x02\x20\x03(\tR\x05hostsB\x03\xe0A\x02\x12=\n\
    \x03tls\x18\x03\x20\x01(\x0b2+.istio.networking.v1beta1.ServerTLSSetting\
    sR\x03tls\x12)\n\x10default_endpoint\x18\x05\x20\x01(\tR\x0fdefaultEndpo\
    int\x12\x12\n\x04name\x18\x06\x20\x01(\tR\x04name\"~\n\x04Port\x12\x1b\n\
    \x06number\x18\x01\x20\x01(\rR\x06numberB\x03\xe0A\x02\x12\x1f\n\x08prot\
    ocol\x18\x02\x20\x01(\tR\x08protocolB\x03\xe0A\x02\x12\x17\n\x04name\x18\
    \x03\x20\x01(\tR\x04nameB\x03\xe0A\x02\x12\x1f\n\x0btarget_port\x18\x04\
    \x20\x01(\rR\ntargetPort\"\xe9\x06\n\x11ServerTLSSettings\x12%\n\x0ehttp\
    s_redirect\x18\x01\x20\x01(\x08R\rhttpsRedirect\x12G\n\x04mode\x18\x02\
    \x20\x01(\x0e23.istio.networking.v1beta1.ServerTLSSettings.TLSmodeR\x04m\
    ode\x12-\n\x12server_certificate\x18\x03\x20\x01(\tR\x11serverCertificat\
    e\x12\x1f\n\x0bprivate_key\x18\x04\x20\x01(\tR\nprivateKey\x12'\n\x0fca_\
    certificates\x18\x05\x20\x01(\tR\x0ecaCertificates\x12'\n\x0fcredential_\
    name\x18\n\x20\x01(\tR\x0ecredentialName\x12*\n\x11subject_alt_names\x18\
    \x06\x20\x03(\tR\x0fsubjectAltNames\x126\n\x17verify_certificate_spki\
    \x18\x0b\x20\x03(\tR\x15verifyCertificateSpki\x126\n\x17verify_certifica\
    te_hash\x18\x0c\x20\x03(\tR\x15verifyCertificateHash\x12i\n\x14min_proto\
    col_version\x18\x07\x20\x01(\x0e27.istio.networking.v1beta1.ServerTLSSet\
    tings.TLSProtocolR\x12minProtocolVersion\x12i\n\x14max_protocol_version\
    \x18\x08\x20\x01(\x0e27.istio.networking.v1beta1.ServerTLSSettings.TLSPr\
    otocolR\x12maxProtocolVersion\x12#\n\rcipher_suites\x18\t\x20\x03(\tR\
    \x0ccipherSuites\"Z\n\x07TLSmode\x12\x0f\n\x0bPASSTHROUGH\x10\0\x12\n\n\
    \x06SIMPLE\x10\x01\x12\n\n\x06MUTUAL\x10\x02\x12\x14\n\x10AUTO_PASSTHROU\
    GH\x10\x03\x12\x10\n\x0cISTIO_MUTUAL\x10\x04\"O\n\x0bTLSProtocol\x12\x0c\
    \n\x08TLS_AUTO\x10\0\x12\x0b\n\x07TLSV1_0\x10\x01\x12\x0b\n\x07TLSV1_1\
    \x10\x02\x12\x0b\n\x07TLSV1_2\x10\x03\x12\x0b\n\x07TLSV1_3\x10\x04B!Z\
    \x1fistio.io/api/networking/v1beta1b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
